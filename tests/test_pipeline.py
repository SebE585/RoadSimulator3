import pandas as pd
import sys
import os
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from simulator.events import inject_events_on_route
from simulator.detectors import detect_all_events, detect_initial_acceleration, detect_final_deceleration
from check.check_realism import check_realism
from core.osrm_utils import simulate_route_via_osrm
from core.postprocessing import finalize_trajectory

HZ = 10
STEP_M = 0.83

def normalize_detection_result(x):
    if isinstance(x, (bool, np.bool_)):
        return x
    # liste, np.array, pd.Series -> True si au moins un True
    try:
        import numpy as np
        import pandas as pd
        if isinstance(x, (list, np.ndarray, pd.Series)):
            return bool(np.any(x))
    except ImportError:
        pass
    return bool(x)

def test_pipeline_consistency():
    # 1. G√©n√©ration d'une trajectoire simple
    df = simulate_route_via_osrm(
        cities_coords=[
            (49.2738, 1.2127),
            (49.4431, 1.0993),
            (49.3568, 1.2342),
            (49.3653, 1.2361),
            (49.3305, 1.1811),
            (49.3364, 1.1733),
        ],
        hz=HZ,
        step_m=STEP_M
    )

    # 2. Injection des √©v√©nements
    df = inject_events_on_route(df, hz=HZ)

    # 3. D√©tection rapide des phases critiques avant post-traitement
    initial_detected = detect_initial_acceleration(df)
    final_detected = detect_final_deceleration(df)
    print(f"[DEBUG] Acc√©l√©ration initiale d√©tect√©e juste apr√®s injection : {'‚úÖ' if initial_detected else '‚ùå'}")
    print(f"[DEBUG] D√©c√©l√©ration finale d√©tect√©e juste apr√®s injection : {'‚úÖ' if final_detected else '‚ùå'}")

    # 4. Finalisation
    df = finalize_trajectory(df, hz=HZ)

    # 5. Analyse par signatures
    detected_signatures = detect_all_events(df)

    # 6. Analyse par labels (event)
    realism, _ = check_realism(df)

    # 7. Comparaison coh√©rente avec normalisation
    mapping = {
        'acceleration': '‚¨ÜÔ∏è Acc√©l√©ration d√©tect√©e',
        'freinage': 'üõë Freinage d√©tect√©',
        'dos_dane': 'ü™µ Dos d‚Äô√¢ne d√©tect√©',
        'trottoir': 'üì¶ Choc trottoir d√©tect√©',
        'nid_de_poule': 'üöß Nid de poule d√©tect√©',
        'stop': '‚è∏Ô∏è Stop d√©tect√©',
        'wait': '‚è±Ô∏è Wait d√©tect√©',
    }

    for key, label in mapping.items():
        sig_detected = normalize_detection_result(detected_signatures.get(key, False))
        realism_detected = normalize_detection_result(realism.get(label, False))
        assert sig_detected == realism_detected, f"Incoh√©rence pour {key}: signature={sig_detected}, realism={realism_detected}"

    assert initial_detected, "L'acc√©l√©ration initiale n'a pas √©t√© d√©tect√©e imm√©diatement apr√®s injection."
    assert final_detected, "La d√©c√©l√©ration finale n'a pas √©t√© d√©tect√©e imm√©diatement apr√®s injection."

    print("‚úÖ Test pipeline coh√©rent : toutes les signatures sont bien pr√©sentes et labellis√©es.")

if __name__ == "__main__":
    test_pipeline_consistency()
